@using Kendo.Mvc.UI
@using VisReg.Cmn.Namings
@model VisReg.Web.ViewModels.VisitorViewModel

@{ ViewBag.Title = NamingStrings.TitleAppShortName; }

<div class="container">
    @using (Html.BeginForm("SaveVisitor", "Visitor", FormMethod.Post, new { @class = "form-horizontal", role = "form", autocomplete = "off" }))
    {
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(m => m.VST_Id)
        
        <div class="panel panel-primary">

            <div class="panel-heading">
                <div class="panel-title text-center"><strong> ΣΤΟΙΧΕΙΑ ΕΠΙΣΚΕΠΤΗ </strong></div>
            </div>

            <div class="panel-body">
                <div class="form-group">
                    @Html.LabelFor(m => m.VST_LastName, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-4">
                        @Html.EditorFor(m => m.VST_LastName, new { htmlAttributes = new { @class = "form-control", @onkeyup = "InputToUpper(this)" } })
                        @Html.ValidationMessageFor(m => m.VST_LastName, "", new { @class = "text-danger" })
                    </div>
                    @Html.LabelFor(m => m.VST_FirstName, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-4">
                        @Html.EditorFor(m => m.VST_FirstName, new { htmlAttributes = new { @class = "form-control", @onkeyup = "InputToUpper(this)" } })
                        @Html.ValidationMessageFor(m => m.VST_FirstName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.VST_FatherName, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-4">
                        @Html.EditorFor(m => m.VST_FatherName, new { htmlAttributes = new { @class = "form-control", @onkeyup = "InputToUpper(this)" } })
                        @Html.ValidationMessageFor(m => m.VST_FatherName, "", new { @class = "text-danger" })
                    </div>
                    @Html.LabelFor(m => m.VST_MotherName, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-4">
                        @Html.EditorFor(m => m.VST_MotherName, new { htmlAttributes = new { @class = "form-control", @onkeyup = "InputToUpper(this)" } })
                        @Html.ValidationMessageFor(m => m.VST_MotherName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.IDC_Name, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-4">
                        @(Html.Kendo().DropDownListFor(m => m.VST_IDC_Id)
                                                .DataTextField("IdentificationCertificateName")
                                                .DataValueField("IdentificationCertificateId")
                                                .OptionLabel("-Επιλογή Τύπου Ταυτ.-")
                                                .HtmlAttributes(new { @id = "ddlIdentificationCertificate", style = "width: 100%" })
                                                .DataSource(source =>
                                                {
                                                    source.Read(read =>
                                                    {
                                                        read.Action("GetIdentificationCertificateAll", "Common", new { area = "" });
                                                    });
                                                })
                        )
                        @Html.ValidationMessageFor(m => m.VST_IDC_Id, "", new { @class = "text-danger" })
                    </div>
                    @Html.LabelFor(m => m.VST_IdentificationNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-4">
                        @Html.EditorFor(m => m.VST_IdentificationNumber, new { htmlAttributes = new { @class = "form-control", @onkeyup = "InputToUpper(this)" } })
                        @Html.ValidationMessageFor(m => m.VST_IdentificationNumber, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.VSC_Name, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-4">
                        @(Html.Kendo().DropDownListFor(m => m.VST_VSC_Id)
                                                .DataTextField("VisitorCategoryName")
                                                .DataValueField("VisitorCategoryId")
                                                .OptionLabel("-Επιλογή Κατηγορίας-")
                                                .HtmlAttributes(new { @id = "ddlVisitorCategory", style = "width: 100%" })
                                                .DataSource(source =>
                                                {
                                                    source.Read(read =>
                                                    {
                                                        read.Action("GetVisitorCategoryAll", "Common", new { area = "" });
                                                    });
                                                })
                        )
                        @Html.ValidationMessageFor(m => m.VST_VSC_Id, "", new { @class = "text-danger" })
                    </div>
                    @Html.LabelFor(m => m.SEX_Name, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-4">
                        @(Html.Kendo().DropDownListFor(m => m.VST_SEX_Id)
                                                .DataTextField("SexName")
                                                .DataValueField("SexId")
                                                .OptionLabel("-Επιλογή Φύλλου-")
                                                .HtmlAttributes(new { @id = "ddlSex", style = "width: 100%" })
                                                .DataSource(source =>
                                                {
                                                    source.Read(read =>
                                                    {
                                                        read.Action("GetSexAll", "Common", new { area = "" });
                                                    });
                                                })
                        )
                        @Html.ValidationMessageFor(m => m.VST_SEX_Id, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.VST_Address, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-4">
                        @Html.EditorFor(m => m.VST_Address, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(m => m.VST_Address, "", new { @class = "text-danger" })
                    </div>
                    @Html.LabelFor(m => m.VST_PostalCode, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-4">
                        @Html.EditorFor(m => m.VST_PostalCode, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(m => m.VST_PostalCode, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                   @Html.LabelFor(m => m.VST_MobileNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-4">
                    @Html.EditorFor(m => m.VST_MobileNumber, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(m => m.VST_MobileNumber, "", new { @class = "text-danger" })
                </div>
                    @Html.LabelFor(m => m.VST_Email, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-4">
                        @Html.EditorFor(m => m.VST_Email, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(m => m.VST_Email, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.VST_Description, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.TextAreaFor(m => m.VST_Description, new { @class = "form-control" })
                    </div>
                </div>

                <div class="row">
                    @* ΑΚΥΡΩΣΗ  *@
                    <div class="col-md-2">
                        <button type="button" class="btn btn-danger btn-group-lg btn-block" id="btnCancelSave">
                            <span class="glyphicon  glyphicon-share-alt"></span> <strong> @NamingStrings.BtnCancel </strong>
                        </button>
                    </div>
                    
                    @* ΑΠΟΘΗΚΕΥΣΗ  *@
                    <div class="col-md-offset-2 col-md-2">
                        <button type="submit" class="btn btn-success btn-group-lg btn-block" id="btnSaveVisitor">
                            <span class="glyphicon glyphicon-floppy-disk"></span> <strong> @NamingStrings.BtnSave </strong>
                        </button>
                    </div>
                </div>

            </div>
        </div>
    }
</div>


<script type="text/javascript">
    $.validator.setDefaults({ ignore: '' });

    // Uppercase
    function InputToUpper(obj) {
        if (obj.value != "") {
            obj.value = obj.value.toUpperCase();
        }
    }
</script>

<script>
    $(document).ready(function () {
        $('#VST_MobileNumber').mask("9999999999");

        // Cancel click
        $("#btnCancelSave").click(function () {
            var myVstId;
            myVstId = $("#VST_Id").val();
            if (myVstId > 0)
                window.location.href = "/Visitor/ShowVisitor?VisitorId=" + myVstId;
            else
                window.location.href = "/Visitor/GetVisitors";
        });

        // Script for unobtrusive validation for Chrome Broswer.
        kendo.culture("el-GR"); //your culture
        $.validator.addMethod('date',
           function (value, element) {
               return this.optional(element) || kendo.parseDate(value)
           });

        $(".k-picker-wrap").css({ 'background-color': '', 'color': '' });
    });
</script>

